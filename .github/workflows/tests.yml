name: TESTS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    environment: CI
    steps:
      - uses: actions/checkout@v3

      - name: Configure NODE
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}
      - name: Download NPM dependencies
        run: |
          npm config set loglevel info
          npm install

      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  m3u-tester-http:
    runs-on: ubuntu-latest
    environment: CI
    needs: prepare
    strategy:
      matrix:
        minSuccess: [ 1, 10 ]
        maxFailures: [ 0, -1, 1 ]
        file: [ "0-10-success.m3u", "5-5-success.m3u", "10-0-success.m3u" ]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4  # Required because each job gets a fresh VM

      - name: Configure NODE
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}

      - name: Restore Cached Node Modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package.json') }}

      - name: Run [m3u-tester] on test/m3u-tester/${{ matrix.file }} with minSuccess=${{ matrix.minSuccess }} and maxFailures=${{ matrix.maxFailures }} [http]
        run: |
          
          get_expected_exit_code() {
            case "${{ matrix.file }}:${{ matrix.minSuccess }}:${{ matrix.maxFailures }}" in
            "0-10-success.m3u:1:0") echo 1 ;;
            "0-10-success.m3u:10:-1") echo 1 ;;
            "0-10-success.m3u:1:1") echo 1 ;;
            "0-10-success.m3u:10:0") echo 1 ;;
            "0-10-success.m3u:1:-1") echo 1 ;;
            "0-10-success.m3u:10:1") echo 1 ;;
            "5-5-success.m3u:1:0") echo 2 ;;
            "5-5-success.m3u:10:-1") echo 1 ;;
            "5-5-success.m3u:1:1") echo 2 ;;
            "5-5-success.m3u:10:0") echo 1 ;;
            "5-5-success.m3u:1:-1") echo 0 ;;
            "5-5-success.m3u:10:1") echo 1 ;;
            "10-0-success.m3u:1:0") echo 0 ;;
            "10-0-success.m3u:10:-1") echo 0 ;;
            "10-0-success.m3u:1:1") echo 0 ;;
            "10-0-success.m3u:10:0") echo 0 ;;
            "10-0-success.m3u:1:-1") echo 0 ;;
            "10-0-success.m3u:10:1") echo 0 ;;
            *) echo 1 ;;  # Default unexpected case
            esac
          }

          set +e
          npm run m3u-tester -- --m3uLocation=test/m3u-tester/${{ matrix.file }} --minSuccess=${{ matrix.minSuccess }} --maxFailures=${{ matrix.maxFailures }} --streamTester=http
          exit_code=$?
          set -e
          
          if [ $exit_code -eq 1 ]; then
            echo "Result: FAILED"
          else
            echo "Result: SUCCESS"
          fi
          expected_exit_code=$(get_expected_exit_code)
          
          if [ "$expected_exit_code" -eq "2" ]; then
            echo "Test IGNORED (undeterministic)"
          elif [ "$exit_code" -eq "$expected_exit_code" ]; then
            echo "Test PASSED (Expected: $expected_exit_code, Got: $exit_code)"
          else
            echo "Test FAILED (Expected: $expected_exit_code, Got: $exit_code)"
            exit 1
          fi

  m3u-tester-ffmpeg:
    runs-on: windows-latest
    environment: CI
    needs: prepare
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4  # Required because each job gets a fresh VM

      - name: Configure NODE
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}
      - name: Upgrade npm to latest
        run: npm install -g npm@^10.0.0 && npm -v

      - name: Restore Cached Node Modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package.json') }}

      - name: Install (powershell)
        shell: pwsh
        run: ./configure.bat
      - name: Run [m3u-tester] on test/m3u-tester/10-0-success.m3u with minSuccess=10 and maxFailures=0 [ffmpeg]
        run: npm run m3u-tester -- --m3uLocation=test/m3u-tester/10-0-success.m3u --minSuccess=10 --maxFailures=0 --streamTester=ffmpeg

  iptv-analyzer:
    runs-on: ubuntu-latest
    environment: CI
    needs: prepare

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4  # Required because each job gets a fresh VM

      - name: Configure NODE
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}

      - name: Restore Cached Node Modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package.json') }}

      - name: Run [iptv-analyzer]
        run: |
          echo "file:///./test/iptv-analyzer/feeds.txt" > ./tools/sources.txt
          npm run iptv-analyzer
      - name: Verify output files
        uses: andstor/file-existence-action@v3
        with:
          files: "tools/succeeded.json, tools/failed.json"
          fail: true
      - name: Compare results with expectations
        run: |
          diff -q tools/succeeded.json test/iptv-analyzer/succeeded.json
          diff -q tools/failed.json test/iptv-analyzer/failed.json

  end:
    runs-on: ubuntu-latest
    needs: [ m3u-tester-http, m3u-tester-ffmpeg, iptv-analyzer ]
    steps:
      - name: Success
        run: echo "Success"